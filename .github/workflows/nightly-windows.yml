name: nightly windowsðŸŒƒ
on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC

jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"

  windows-build:
    #needs: check_date
    #if: ${{ needs.check_date.outputs.should_run != 'false' }}

    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - PLATFORM: 'windows-64'
            PYTHON_ARCH: 'x64'
            VS_ARCH: 'amd64'

    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Set up Python 3.11.3
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.3"

      - name: Init submodule
        run: |
          git submodule init
          git submodule update

      - name: Cache py4godot and build directories
        uses: actions/cache@v3
        with:
          path: |
            py4godot
            build
          key: ${{ runner.os }}-checkout-${{ hashFiles('**/generate_classes.py', '**/generate_pxd_bridge.py', '**/extension_api.json') }}
          restore-keys: |
            ${{ runner.os }}-checkout-

      - name: Sync file timestamps
        shell: bash
        run: |
          # Sync .cpp and .pxd file timestamps with .pyx files
          find classes -name '*.pyx' | while read pyx_file; do
              # Update .cpp file
              cpp_file="${pyx_file%.pyx}.cpp"
              if [ -f "$cpp_file" ]; then
                  touch -r "$pyx_file" "$cpp_file"
              fi
          
              # Update .pxd file
              pxd_file="${pyx_file%.pyx}.pxd"
              if [ -f "$pxd_file" ]; then
                  touch -r "$pyx_file" "$pxd_file"
              fi
          done

          # Sync standalone .pxd files with their corresponding .cpp files
          find classes -name '*.pxd' | while read pxd_file; do
            cpp_file="${pxd_file%.pxd}.cpp"
            if [ -f "$cpp_file" ]; then
              touch -r "$pxd_file" "$cpp_file"
            fi
          done

      - name: Install Mesa
        shell: cmd
        run: |
          mkdir godot
          curl.exe -L --output godot/mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
          "C:\Program Files\7-Zip\7z.exe" x godot/mesa.7z -ogodot
          cd godot
          mklink opengl32.dll "x64\opengl32.dll"
          mklink libglapi.dll "x64\libglapi.dll"

      - name: Print structure
        run: python meson_scripts/print_tools.py

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          python -m pip install flake8

      - name: Generate cast helpers
        run: python meson_scripts/generate_cast_helpers.py

      - name: Generate files
        run: python generate.py

      - name: Cythonize dev
        run: python dev_cythonize_files.py

      - name: Build
        run: python build.py --target_platform=windows64 --compiler=gcc -create_plugin=False -buildtype=release

      - name: Print structure
        run: python meson_scripts/print_tools.py
