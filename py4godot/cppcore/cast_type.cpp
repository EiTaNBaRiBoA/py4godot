#include "py4godot/cppcore/cast_type.h"
#include <cassert>

constexpr unsigned int str2int(const char* str, int h = 0)
{
    return !str[h] ? 5381 : (str2int(str, h+1) * 33) ^ str[h];
}

void init_casting(){

    import_py4godot__core__variant4__cast_helpers();
    if (PyErr_Occurred())
    {
        PyObject *ptype, *pvalue, *ptraceback;
        PyErr_Fetch(&ptype, &pvalue, &ptraceback);

        PyObject* str_exc_type = PyObject_Repr(pvalue); //Now a unicode
        PyObject* pyStr = PyUnicode_AsEncodedString(str_exc_type, "utf-8","Error ~");
        const char *strExcType = PyBytes_AS_STRING(pyStr);
        PyErr_Print();
        assert(false);
        return;
    }
}

PyObject* cast_to_type(char* classname, PyObject* object_to_cast){
    switch(str2int(classname)){
        case str2int("AESContext"):
            return cast_to_aescontext(object_to_cast);
        case str2int("AStar2D"):
            return cast_to_astar2d(object_to_cast);
        case str2int("AStar3D"):
            return cast_to_astar3d(object_to_cast);
        case str2int("AStarGrid2D"):
            return cast_to_astargrid2d(object_to_cast);
        case str2int("AcceptDialog"):
            return cast_to_acceptdialog(object_to_cast);
        case str2int("AnimatableBody2D"):
            return cast_to_animatablebody2d(object_to_cast);
        case str2int("AnimatableBody3D"):
            return cast_to_animatablebody3d(object_to_cast);
        case str2int("AnimatedSprite2D"):
            return cast_to_animatedsprite2d(object_to_cast);
        case str2int("AnimatedSprite3D"):
            return cast_to_animatedsprite3d(object_to_cast);
        case str2int("AnimatedTexture"):
            return cast_to_animatedtexture(object_to_cast);
        case str2int("Animation"):
            return cast_to_animation(object_to_cast);
        case str2int("AnimationLibrary"):
            return cast_to_animationlibrary(object_to_cast);
        case str2int("AnimationMixer"):
            return cast_to_animationmixer(object_to_cast);
        case str2int("AnimationNode"):
            return cast_to_animationnode(object_to_cast);
        case str2int("AnimationNodeAdd2"):
            return cast_to_animationnodeadd2(object_to_cast);
        case str2int("AnimationNodeAdd3"):
            return cast_to_animationnodeadd3(object_to_cast);
        case str2int("AnimationNodeAnimation"):
            return cast_to_animationnodeanimation(object_to_cast);
        case str2int("AnimationNodeBlend2"):
            return cast_to_animationnodeblend2(object_to_cast);
        case str2int("AnimationNodeBlend3"):
            return cast_to_animationnodeblend3(object_to_cast);
        case str2int("AnimationNodeBlendSpace1D"):
            return cast_to_animationnodeblendspace1d(object_to_cast);
        case str2int("AnimationNodeBlendSpace2D"):
            return cast_to_animationnodeblendspace2d(object_to_cast);
        case str2int("AnimationNodeBlendTree"):
            return cast_to_animationnodeblendtree(object_to_cast);
        case str2int("AnimationNodeOneShot"):
            return cast_to_animationnodeoneshot(object_to_cast);
        case str2int("AnimationNodeOutput"):
            return cast_to_animationnodeoutput(object_to_cast);
        case str2int("AnimationNodeStateMachine"):
            return cast_to_animationnodestatemachine(object_to_cast);
        case str2int("AnimationNodeSub2"):
            return cast_to_animationnodesub2(object_to_cast);
        case str2int("AnimationNodeSync"):
            return cast_to_animationnodesync(object_to_cast);
        case str2int("AnimationNodeTimeScale"):
            return cast_to_animationnodetimescale(object_to_cast);
        case str2int("AnimationNodeTimeSeek"):
            return cast_to_animationnodetimeseek(object_to_cast);
        case str2int("AnimationNodeTransition"):
            return cast_to_animationnodetransition(object_to_cast);
        case str2int("AnimationPlayer"):
            return cast_to_animationplayer(object_to_cast);
        case str2int("AnimationRootNode"):
            return cast_to_animationrootnode(object_to_cast);
        case str2int("AnimationTree"):
            return cast_to_animationtree(object_to_cast);
        case str2int("Area2D"):
            return cast_to_area2d(object_to_cast);
        case str2int("Area3D"):
            return cast_to_area3d(object_to_cast);
        case str2int("ArrayMesh"):
            return cast_to_arraymesh(object_to_cast);
        case str2int("ArrayOccluder3D"):
            return cast_to_arrayoccluder3d(object_to_cast);
        case str2int("AspectRatioContainer"):
            return cast_to_aspectratiocontainer(object_to_cast);
        case str2int("AtlasTexture"):
            return cast_to_atlastexture(object_to_cast);
        case str2int("AudioBusLayout"):
            return cast_to_audiobuslayout(object_to_cast);
        case str2int("AudioEffect"):
            return cast_to_audioeffect(object_to_cast);
        case str2int("AudioEffectAmplify"):
            return cast_to_audioeffectamplify(object_to_cast);
        case str2int("AudioEffectBandLimitFilter"):
            return cast_to_audioeffectbandlimitfilter(object_to_cast);
        case str2int("AudioEffectBandPassFilter"):
            return cast_to_audioeffectbandpassfilter(object_to_cast);
        case str2int("AudioEffectCapture"):
            return cast_to_audioeffectcapture(object_to_cast);
        case str2int("AudioEffectChorus"):
            return cast_to_audioeffectchorus(object_to_cast);
        case str2int("AudioEffectCompressor"):
            return cast_to_audioeffectcompressor(object_to_cast);
        case str2int("AudioEffectDelay"):
            return cast_to_audioeffectdelay(object_to_cast);
        case str2int("AudioEffectDistortion"):
            return cast_to_audioeffectdistortion(object_to_cast);
        case str2int("AudioEffectEQ"):
            return cast_to_audioeffecteq(object_to_cast);
        case str2int("AudioEffectEQ10"):
            return cast_to_audioeffecteq10(object_to_cast);
        case str2int("AudioEffectEQ21"):
            return cast_to_audioeffecteq21(object_to_cast);
        case str2int("AudioEffectEQ6"):
            return cast_to_audioeffecteq6(object_to_cast);
        case str2int("AudioEffectFilter"):
            return cast_to_audioeffectfilter(object_to_cast);
        case str2int("AudioEffectHardLimiter"):
            return cast_to_audioeffecthardlimiter(object_to_cast);
        case str2int("AudioEffectHighPassFilter"):
            return cast_to_audioeffecthighpassfilter(object_to_cast);
        case str2int("AudioEffectHighShelfFilter"):
            return cast_to_audioeffecthighshelffilter(object_to_cast);
        case str2int("AudioEffectInstance"):
            return cast_to_audioeffectinstance(object_to_cast);
        case str2int("AudioEffectLimiter"):
            return cast_to_audioeffectlimiter(object_to_cast);
        case str2int("AudioEffectLowPassFilter"):
            return cast_to_audioeffectlowpassfilter(object_to_cast);
        case str2int("AudioEffectLowShelfFilter"):
            return cast_to_audioeffectlowshelffilter(object_to_cast);
        case str2int("AudioEffectNotchFilter"):
            return cast_to_audioeffectnotchfilter(object_to_cast);
        case str2int("AudioEffectPanner"):
            return cast_to_audioeffectpanner(object_to_cast);
        case str2int("AudioEffectPhaser"):
            return cast_to_audioeffectphaser(object_to_cast);
        case str2int("AudioEffectPitchShift"):
            return cast_to_audioeffectpitchshift(object_to_cast);
        case str2int("AudioEffectRecord"):
            return cast_to_audioeffectrecord(object_to_cast);
        case str2int("AudioEffectReverb"):
            return cast_to_audioeffectreverb(object_to_cast);
        case str2int("AudioEffectSpectrumAnalyzer"):
            return cast_to_audioeffectspectrumanalyzer(object_to_cast);
        case str2int("AudioEffectStereoEnhance"):
            return cast_to_audioeffectstereoenhance(object_to_cast);
        case str2int("AudioListener2D"):
            return cast_to_audiolistener2d(object_to_cast);
        case str2int("AudioListener3D"):
            return cast_to_audiolistener3d(object_to_cast);
        case str2int("AudioSample"):
            return cast_to_audiosample(object_to_cast);
        case str2int("AudioSamplePlayback"):
            return cast_to_audiosampleplayback(object_to_cast);
        case str2int("AudioServer"):
            return cast_to_audioserver(object_to_cast);
        case str2int("AudioStream"):
            return cast_to_audiostream(object_to_cast);
        case str2int("AudioStreamGenerator"):
            return cast_to_audiostreamgenerator(object_to_cast);
        case str2int("AudioStreamGeneratorPlayback"):
            return cast_to_audiostreamgeneratorplayback(object_to_cast);
        case str2int("AudioStreamInteractive"):
            return cast_to_audiostreaminteractive(object_to_cast);
        case str2int("AudioStreamMP3"):
            return cast_to_audiostreammp3(object_to_cast);
        case str2int("AudioStreamMicrophone"):
            return cast_to_audiostreammicrophone(object_to_cast);
        case str2int("AudioStreamOggVorbis"):
            return cast_to_audiostreamoggvorbis(object_to_cast);
        case str2int("AudioStreamPlayback"):
            return cast_to_audiostreamplayback(object_to_cast);
        case str2int("AudioStreamPlaybackOggVorbis"):
            return cast_to_audiostreamplaybackoggvorbis(object_to_cast);
        case str2int("AudioStreamPlaybackPlaylist"):
            return cast_to_audiostreamplaybackplaylist(object_to_cast);
        case str2int("AudioStreamPlaybackPolyphonic"):
            return cast_to_audiostreamplaybackpolyphonic(object_to_cast);
        case str2int("AudioStreamPlaybackResampled"):
            return cast_to_audiostreamplaybackresampled(object_to_cast);
        case str2int("AudioStreamPlayer"):
            return cast_to_audiostreamplayer(object_to_cast);
        case str2int("AudioStreamPlayer2D"):
            return cast_to_audiostreamplayer2d(object_to_cast);
        case str2int("AudioStreamPlayer3D"):
            return cast_to_audiostreamplayer3d(object_to_cast);
        case str2int("AudioStreamPlaylist"):
            return cast_to_audiostreamplaylist(object_to_cast);
        case str2int("AudioStreamPolyphonic"):
            return cast_to_audiostreampolyphonic(object_to_cast);
        case str2int("AudioStreamRandomizer"):
            return cast_to_audiostreamrandomizer(object_to_cast);
        case str2int("AudioStreamSynchronized"):
            return cast_to_audiostreamsynchronized(object_to_cast);
        case str2int("AudioStreamWAV"):
            return cast_to_audiostreamwav(object_to_cast);
        case str2int("BackBufferCopy"):
            return cast_to_backbuffercopy(object_to_cast);
        case str2int("BaseButton"):
            return cast_to_basebutton(object_to_cast);
        case str2int("BaseMaterial3D"):
            return cast_to_basematerial3d(object_to_cast);
        case str2int("BitMap"):
            return cast_to_bitmap(object_to_cast);
        case str2int("Bone2D"):
            return cast_to_bone2d(object_to_cast);
        case str2int("BoneAttachment3D"):
            return cast_to_boneattachment3d(object_to_cast);
        case str2int("BoneMap"):
            return cast_to_bonemap(object_to_cast);
        case str2int("BoxContainer"):
            return cast_to_boxcontainer(object_to_cast);
        case str2int("BoxMesh"):
            return cast_to_boxmesh(object_to_cast);
        case str2int("BoxOccluder3D"):
            return cast_to_boxoccluder3d(object_to_cast);
        case str2int("BoxShape3D"):
            return cast_to_boxshape3d(object_to_cast);
        case str2int("Button"):
            return cast_to_button(object_to_cast);
        case str2int("ButtonGroup"):
            return cast_to_buttongroup(object_to_cast);
        case str2int("CPUParticles2D"):
            return cast_to_cpuparticles2d(object_to_cast);
        case str2int("CPUParticles3D"):
            return cast_to_cpuparticles3d(object_to_cast);
        case str2int("CSGBox3D"):
            return cast_to_csgbox3d(object_to_cast);
        case str2int("CSGCombiner3D"):
            return cast_to_csgcombiner3d(object_to_cast);
        case str2int("CSGCylinder3D"):
            return cast_to_csgcylinder3d(object_to_cast);
        case str2int("CSGMesh3D"):
            return cast_to_csgmesh3d(object_to_cast);
        case str2int("CSGPolygon3D"):
            return cast_to_csgpolygon3d(object_to_cast);
        case str2int("CSGPrimitive3D"):
            return cast_to_csgprimitive3d(object_to_cast);
        case str2int("CSGShape3D"):
            return cast_to_csgshape3d(object_to_cast);
        case str2int("CSGSphere3D"):
            return cast_to_csgsphere3d(object_to_cast);
        case str2int("CSGTorus3D"):
            return cast_to_csgtorus3d(object_to_cast);
        case str2int("CallbackTweener"):
            return cast_to_callbacktweener(object_to_cast);
        case str2int("Camera2D"):
            return cast_to_camera2d(object_to_cast);
        case str2int("Camera3D"):
            return cast_to_camera3d(object_to_cast);
        case str2int("CameraAttributes"):
            return cast_to_cameraattributes(object_to_cast);
        case str2int("CameraAttributesPhysical"):
            return cast_to_cameraattributesphysical(object_to_cast);
        case str2int("CameraAttributesPractical"):
            return cast_to_cameraattributespractical(object_to_cast);
        case str2int("CameraFeed"):
            return cast_to_camerafeed(object_to_cast);
        case str2int("CameraServer"):
            return cast_to_cameraserver(object_to_cast);
        case str2int("CameraTexture"):
            return cast_to_cameratexture(object_to_cast);
        case str2int("CanvasGroup"):
            return cast_to_canvasgroup(object_to_cast);
        case str2int("CanvasItem"):
            return cast_to_canvasitem(object_to_cast);
        case str2int("CanvasItemMaterial"):
            return cast_to_canvasitemmaterial(object_to_cast);
        case str2int("CanvasLayer"):
            return cast_to_canvaslayer(object_to_cast);
        case str2int("CanvasModulate"):
            return cast_to_canvasmodulate(object_to_cast);
        case str2int("CanvasTexture"):
            return cast_to_canvastexture(object_to_cast);
        case str2int("CapsuleMesh"):
            return cast_to_capsulemesh(object_to_cast);
        case str2int("CapsuleShape2D"):
            return cast_to_capsuleshape2d(object_to_cast);
        case str2int("CapsuleShape3D"):
            return cast_to_capsuleshape3d(object_to_cast);
        case str2int("CenterContainer"):
            return cast_to_centercontainer(object_to_cast);
        case str2int("CharFXTransform"):
            return cast_to_charfxtransform(object_to_cast);
        case str2int("CharacterBody2D"):
            return cast_to_characterbody2d(object_to_cast);
        case str2int("CharacterBody3D"):
            return cast_to_characterbody3d(object_to_cast);
        case str2int("CheckBox"):
            return cast_to_checkbox(object_to_cast);
        case str2int("CheckButton"):
            return cast_to_checkbutton(object_to_cast);
        case str2int("CircleShape2D"):
            return cast_to_circleshape2d(object_to_cast);
        case str2int("ClassDB"):
            return cast_to_classdb(object_to_cast);
        case str2int("CodeEdit"):
            return cast_to_codeedit(object_to_cast);
        case str2int("CodeHighlighter"):
            return cast_to_codehighlighter(object_to_cast);
        case str2int("CollisionObject2D"):
            return cast_to_collisionobject2d(object_to_cast);
        case str2int("CollisionObject3D"):
            return cast_to_collisionobject3d(object_to_cast);
        case str2int("CollisionPolygon2D"):
            return cast_to_collisionpolygon2d(object_to_cast);
        case str2int("CollisionPolygon3D"):
            return cast_to_collisionpolygon3d(object_to_cast);
        case str2int("CollisionShape2D"):
            return cast_to_collisionshape2d(object_to_cast);
        case str2int("CollisionShape3D"):
            return cast_to_collisionshape3d(object_to_cast);
        case str2int("ColorPicker"):
            return cast_to_colorpicker(object_to_cast);
        case str2int("ColorPickerButton"):
            return cast_to_colorpickerbutton(object_to_cast);
        case str2int("ColorRect"):
            return cast_to_colorrect(object_to_cast);
        case str2int("Compositor"):
            return cast_to_compositor(object_to_cast);
        case str2int("CompositorEffect"):
            return cast_to_compositoreffect(object_to_cast);
        case str2int("CompressedCubemap"):
            return cast_to_compressedcubemap(object_to_cast);
        case str2int("CompressedCubemapArray"):
            return cast_to_compressedcubemaparray(object_to_cast);
        case str2int("CompressedTexture2D"):
            return cast_to_compressedtexture2d(object_to_cast);
        case str2int("CompressedTexture2DArray"):
            return cast_to_compressedtexture2darray(object_to_cast);
        case str2int("CompressedTexture3D"):
            return cast_to_compressedtexture3d(object_to_cast);
        case str2int("CompressedTextureLayered"):
            return cast_to_compressedtexturelayered(object_to_cast);
        case str2int("ConcavePolygonShape2D"):
            return cast_to_concavepolygonshape2d(object_to_cast);
        case str2int("ConcavePolygonShape3D"):
            return cast_to_concavepolygonshape3d(object_to_cast);
        case str2int("ConeTwistJoint3D"):
            return cast_to_conetwistjoint3d(object_to_cast);
        case str2int("ConfigFile"):
            return cast_to_configfile(object_to_cast);
        case str2int("ConfirmationDialog"):
            return cast_to_confirmationdialog(object_to_cast);
        case str2int("Container"):
            return cast_to_container(object_to_cast);
        case str2int("Control"):
            return cast_to_control(object_to_cast);
        case str2int("ConvexPolygonShape2D"):
            return cast_to_convexpolygonshape2d(object_to_cast);
        case str2int("ConvexPolygonShape3D"):
            return cast_to_convexpolygonshape3d(object_to_cast);
        case str2int("Crypto"):
            return cast_to_crypto(object_to_cast);
        case str2int("CryptoKey"):
            return cast_to_cryptokey(object_to_cast);
        case str2int("Cubemap"):
            return cast_to_cubemap(object_to_cast);
        case str2int("CubemapArray"):
            return cast_to_cubemaparray(object_to_cast);
        case str2int("Curve"):
            return cast_to_curve(object_to_cast);
        case str2int("Curve2D"):
            return cast_to_curve2d(object_to_cast);
        case str2int("Curve3D"):
            return cast_to_curve3d(object_to_cast);
        case str2int("CurveTexture"):
            return cast_to_curvetexture(object_to_cast);
        case str2int("CurveXYZTexture"):
            return cast_to_curvexyztexture(object_to_cast);
        case str2int("CylinderMesh"):
            return cast_to_cylindermesh(object_to_cast);
        case str2int("CylinderShape3D"):
            return cast_to_cylindershape3d(object_to_cast);
        case str2int("DTLSServer"):
            return cast_to_dtlsserver(object_to_cast);
        case str2int("DampedSpringJoint2D"):
            return cast_to_dampedspringjoint2d(object_to_cast);
        case str2int("Decal"):
            return cast_to_decal(object_to_cast);
        case str2int("DirAccess"):
            return cast_to_diraccess(object_to_cast);
        case str2int("DirectionalLight2D"):
            return cast_to_directionallight2d(object_to_cast);
        case str2int("DirectionalLight3D"):
            return cast_to_directionallight3d(object_to_cast);
        case str2int("DisplayServer"):
            return cast_to_displayserver(object_to_cast);
        case str2int("ENetConnection"):
            return cast_to_enetconnection(object_to_cast);
        case str2int("ENetMultiplayerPeer"):
            return cast_to_enetmultiplayerpeer(object_to_cast);
        case str2int("ENetPacketPeer"):
            return cast_to_enetpacketpeer(object_to_cast);
        case str2int("EditorCommandPalette"):
            return cast_to_editorcommandpalette(object_to_cast);
        case str2int("EditorDebuggerPlugin"):
            return cast_to_editordebuggerplugin(object_to_cast);
        case str2int("EditorDebuggerSession"):
            return cast_to_editordebuggersession(object_to_cast);
        case str2int("EditorExportPlatform"):
            return cast_to_editorexportplatform(object_to_cast);
        case str2int("EditorExportPlatformAndroid"):
            return cast_to_editorexportplatformandroid(object_to_cast);
        case str2int("EditorExportPlatformIOS"):
            return cast_to_editorexportplatformios(object_to_cast);
        case str2int("EditorExportPlatformLinuxBSD"):
            return cast_to_editorexportplatformlinuxbsd(object_to_cast);
        case str2int("EditorExportPlatformMacOS"):
            return cast_to_editorexportplatformmacos(object_to_cast);
        case str2int("EditorExportPlatformPC"):
            return cast_to_editorexportplatformpc(object_to_cast);
        case str2int("EditorExportPlatformWeb"):
            return cast_to_editorexportplatformweb(object_to_cast);
        case str2int("EditorExportPlatformWindows"):
            return cast_to_editorexportplatformwindows(object_to_cast);
        case str2int("EditorExportPlugin"):
            return cast_to_editorexportplugin(object_to_cast);
        case str2int("EditorFeatureProfile"):
            return cast_to_editorfeatureprofile(object_to_cast);
        case str2int("EditorFileDialog"):
            return cast_to_editorfiledialog(object_to_cast);
        case str2int("EditorFileSystem"):
            return cast_to_editorfilesystem(object_to_cast);
        case str2int("EditorFileSystemDirectory"):
            return cast_to_editorfilesystemdirectory(object_to_cast);
        case str2int("EditorImportPlugin"):
            return cast_to_editorimportplugin(object_to_cast);
        case str2int("EditorInspector"):
            return cast_to_editorinspector(object_to_cast);
        case str2int("EditorInspectorPlugin"):
            return cast_to_editorinspectorplugin(object_to_cast);
        case str2int("EditorInterface"):
            return cast_to_editorinterface(object_to_cast);
        case str2int("EditorNode3DGizmo"):
            return cast_to_editornode3dgizmo(object_to_cast);
        case str2int("EditorNode3DGizmoPlugin"):
            return cast_to_editornode3dgizmoplugin(object_to_cast);
        case str2int("EditorPaths"):
            return cast_to_editorpaths(object_to_cast);
        case str2int("EditorPlugin"):
            return cast_to_editorplugin(object_to_cast);
        case str2int("EditorProperty"):
            return cast_to_editorproperty(object_to_cast);
        case str2int("EditorResourcePicker"):
            return cast_to_editorresourcepicker(object_to_cast);
        case str2int("EditorResourcePreview"):
            return cast_to_editorresourcepreview(object_to_cast);
        case str2int("EditorResourceTooltipPlugin"):
            return cast_to_editorresourcetooltipplugin(object_to_cast);
        case str2int("EditorSceneFormatImporter"):
            return cast_to_editorsceneformatimporter(object_to_cast);
        case str2int("EditorSceneFormatImporterGLTF"):
            return cast_to_editorsceneformatimportergltf(object_to_cast);
        case str2int("EditorSceneFormatImporterUFBX"):
            return cast_to_editorsceneformatimporterufbx(object_to_cast);
        case str2int("EditorScenePostImport"):
            return cast_to_editorscenepostimport(object_to_cast);
        case str2int("EditorScenePostImportPlugin"):
            return cast_to_editorscenepostimportplugin(object_to_cast);
        case str2int("EditorScript"):
            return cast_to_editorscript(object_to_cast);
        case str2int("EditorScriptPicker"):
            return cast_to_editorscriptpicker(object_to_cast);
        case str2int("EditorSelection"):
            return cast_to_editorselection(object_to_cast);
        case str2int("EditorSettings"):
            return cast_to_editorsettings(object_to_cast);
        case str2int("EditorSpinSlider"):
            return cast_to_editorspinslider(object_to_cast);
        case str2int("EditorSyntaxHighlighter"):
            return cast_to_editorsyntaxhighlighter(object_to_cast);
        case str2int("EditorTranslationParserPlugin"):
            return cast_to_editortranslationparserplugin(object_to_cast);
        case str2int("EditorUndoRedoManager"):
            return cast_to_editorundoredomanager(object_to_cast);
        case str2int("EditorVCSInterface"):
            return cast_to_editorvcsinterface(object_to_cast);
        case str2int("EncodedObjectAsID"):
            return cast_to_encodedobjectasid(object_to_cast);
        case str2int("Engine"):
            return cast_to_engine(object_to_cast);
        case str2int("EngineDebugger"):
            return cast_to_enginedebugger(object_to_cast);
        case str2int("EngineProfiler"):
            return cast_to_engineprofiler(object_to_cast);
        case str2int("Environment"):
            return cast_to_environment(object_to_cast);
        case str2int("Expression"):
            return cast_to_expression(object_to_cast);
        case str2int("FBXDocument"):
            return cast_to_fbxdocument(object_to_cast);
        case str2int("FBXState"):
            return cast_to_fbxstate(object_to_cast);
        case str2int("FastNoiseLite"):
            return cast_to_fastnoiselite(object_to_cast);
        case str2int("FileAccess"):
            return cast_to_fileaccess(object_to_cast);
        case str2int("FileDialog"):
            return cast_to_filedialog(object_to_cast);
        case str2int("FileSystemDock"):
            return cast_to_filesystemdock(object_to_cast);
        case str2int("FlowContainer"):
            return cast_to_flowcontainer(object_to_cast);
        case str2int("FogMaterial"):
            return cast_to_fogmaterial(object_to_cast);
        case str2int("FogVolume"):
            return cast_to_fogvolume(object_to_cast);
        case str2int("Font"):
            return cast_to_font(object_to_cast);
        case str2int("FontFile"):
            return cast_to_fontfile(object_to_cast);
        case str2int("FontVariation"):
            return cast_to_fontvariation(object_to_cast);
        case str2int("FramebufferCacheRD"):
            return cast_to_framebuffercacherd(object_to_cast);
        case str2int("GDExtension"):
            return cast_to_gdextension(object_to_cast);
        case str2int("GDExtensionManager"):
            return cast_to_gdextensionmanager(object_to_cast);
        case str2int("GDScript"):
            return cast_to_gdscript(object_to_cast);
        case str2int("GLTFAccessor"):
            return cast_to_gltfaccessor(object_to_cast);
        case str2int("GLTFAnimation"):
            return cast_to_gltfanimation(object_to_cast);
        case str2int("GLTFBufferView"):
            return cast_to_gltfbufferview(object_to_cast);
        case str2int("GLTFCamera"):
            return cast_to_gltfcamera(object_to_cast);
        case str2int("GLTFDocument"):
            return cast_to_gltfdocument(object_to_cast);
        case str2int("GLTFDocumentExtension"):
            return cast_to_gltfdocumentextension(object_to_cast);
        case str2int("GLTFLight"):
            return cast_to_gltflight(object_to_cast);
        case str2int("GLTFMesh"):
            return cast_to_gltfmesh(object_to_cast);
        case str2int("GLTFNode"):
            return cast_to_gltfnode(object_to_cast);
        case str2int("GLTFPhysicsBody"):
            return cast_to_gltfphysicsbody(object_to_cast);
        case str2int("GLTFPhysicsShape"):
            return cast_to_gltfphysicsshape(object_to_cast);
        case str2int("GLTFSkeleton"):
            return cast_to_gltfskeleton(object_to_cast);
        case str2int("GLTFSkin"):
            return cast_to_gltfskin(object_to_cast);
        case str2int("GLTFSpecGloss"):
            return cast_to_gltfspecgloss(object_to_cast);
        case str2int("GLTFState"):
            return cast_to_gltfstate(object_to_cast);
        case str2int("GLTFTexture"):
            return cast_to_gltftexture(object_to_cast);
        case str2int("GLTFTextureSampler"):
            return cast_to_gltftexturesampler(object_to_cast);
        case str2int("GPUParticles2D"):
            return cast_to_gpuparticles2d(object_to_cast);
        case str2int("GPUParticles3D"):
            return cast_to_gpuparticles3d(object_to_cast);
        case str2int("GPUParticlesAttractor3D"):
            return cast_to_gpuparticlesattractor3d(object_to_cast);
        case str2int("GPUParticlesAttractorBox3D"):
            return cast_to_gpuparticlesattractorbox3d(object_to_cast);
        case str2int("GPUParticlesAttractorSphere3D"):
            return cast_to_gpuparticlesattractorsphere3d(object_to_cast);
        case str2int("GPUParticlesCollision3D"):
            return cast_to_gpuparticlescollision3d(object_to_cast);
        case str2int("GPUParticlesCollisionBox3D"):
            return cast_to_gpuparticlescollisionbox3d(object_to_cast);
        case str2int("GPUParticlesCollisionSDF3D"):
            return cast_to_gpuparticlescollisionsdf3d(object_to_cast);
        case str2int("GPUParticlesCollisionSphere3D"):
            return cast_to_gpuparticlescollisionsphere3d(object_to_cast);
        case str2int("Generic6DOFJoint3D"):
            return cast_to_generic6dofjoint3d(object_to_cast);
        case str2int("Geometry2D"):
            return cast_to_geometry2d(object_to_cast);
        case str2int("Geometry3D"):
            return cast_to_geometry3d(object_to_cast);
        case str2int("GeometryInstance3D"):
            return cast_to_geometryinstance3d(object_to_cast);
        case str2int("Gradient"):
            return cast_to_gradient(object_to_cast);
        case str2int("GradientTexture1D"):
            return cast_to_gradienttexture1d(object_to_cast);
        case str2int("GradientTexture2D"):
            return cast_to_gradienttexture2d(object_to_cast);
        case str2int("GraphEdit"):
            return cast_to_graphedit(object_to_cast);
        case str2int("GraphElement"):
            return cast_to_graphelement(object_to_cast);
        case str2int("GraphFrame"):
            return cast_to_graphframe(object_to_cast);
        case str2int("GraphNode"):
            return cast_to_graphnode(object_to_cast);
        case str2int("GridContainer"):
            return cast_to_gridcontainer(object_to_cast);
        case str2int("GridMap"):
            return cast_to_gridmap(object_to_cast);
        case str2int("GrooveJoint2D"):
            return cast_to_groovejoint2d(object_to_cast);
        case str2int("HBoxContainer"):
            return cast_to_hboxcontainer(object_to_cast);
        case str2int("HFlowContainer"):
            return cast_to_hflowcontainer(object_to_cast);
        case str2int("HMACContext"):
            return cast_to_hmaccontext(object_to_cast);
        case str2int("HScrollBar"):
            return cast_to_hscrollbar(object_to_cast);
        case str2int("HSeparator"):
            return cast_to_hseparator(object_to_cast);
        case str2int("HSlider"):
            return cast_to_hslider(object_to_cast);
        case str2int("HSplitContainer"):
            return cast_to_hsplitcontainer(object_to_cast);
        case str2int("HTTPClient"):
            return cast_to_httpclient(object_to_cast);
        case str2int("HTTPRequest"):
            return cast_to_httprequest(object_to_cast);
        case str2int("HashingContext"):
            return cast_to_hashingcontext(object_to_cast);
        case str2int("HeightMapShape3D"):
            return cast_to_heightmapshape3d(object_to_cast);
        case str2int("HingeJoint3D"):
            return cast_to_hingejoint3d(object_to_cast);
        case str2int("IP"):
            return cast_to_ip(object_to_cast);
        case str2int("Image"):
            return cast_to_image(object_to_cast);
        case str2int("ImageFormatLoader"):
            return cast_to_imageformatloader(object_to_cast);
        case str2int("ImageFormatLoaderExtension"):
            return cast_to_imageformatloaderextension(object_to_cast);
        case str2int("ImageTexture"):
            return cast_to_imagetexture(object_to_cast);
        case str2int("ImageTexture3D"):
            return cast_to_imagetexture3d(object_to_cast);
        case str2int("ImageTextureLayered"):
            return cast_to_imagetexturelayered(object_to_cast);
        case str2int("ImmediateMesh"):
            return cast_to_immediatemesh(object_to_cast);
        case str2int("ImporterMesh"):
            return cast_to_importermesh(object_to_cast);
        case str2int("ImporterMeshInstance3D"):
            return cast_to_importermeshinstance3d(object_to_cast);
        case str2int("Input"):
            return cast_to_input(object_to_cast);
        case str2int("InputEvent"):
            return cast_to_inputevent(object_to_cast);
        case str2int("InputEventAction"):
            return cast_to_inputeventaction(object_to_cast);
        case str2int("InputEventFromWindow"):
            return cast_to_inputeventfromwindow(object_to_cast);
        case str2int("InputEventGesture"):
            return cast_to_inputeventgesture(object_to_cast);
        case str2int("InputEventJoypadButton"):
            return cast_to_inputeventjoypadbutton(object_to_cast);
        case str2int("InputEventJoypadMotion"):
            return cast_to_inputeventjoypadmotion(object_to_cast);
        case str2int("InputEventKey"):
            return cast_to_inputeventkey(object_to_cast);
        case str2int("InputEventMIDI"):
            return cast_to_inputeventmidi(object_to_cast);
        case str2int("InputEventMagnifyGesture"):
            return cast_to_inputeventmagnifygesture(object_to_cast);
        case str2int("InputEventMouse"):
            return cast_to_inputeventmouse(object_to_cast);
        case str2int("InputEventMouseButton"):
            return cast_to_inputeventmousebutton(object_to_cast);
        case str2int("InputEventMouseMotion"):
            return cast_to_inputeventmousemotion(object_to_cast);
        case str2int("InputEventPanGesture"):
            return cast_to_inputeventpangesture(object_to_cast);
        case str2int("InputEventScreenDrag"):
            return cast_to_inputeventscreendrag(object_to_cast);
        case str2int("InputEventScreenTouch"):
            return cast_to_inputeventscreentouch(object_to_cast);
        case str2int("InputEventShortcut"):
            return cast_to_inputeventshortcut(object_to_cast);
        case str2int("InputEventWithModifiers"):
            return cast_to_inputeventwithmodifiers(object_to_cast);
        case str2int("InputMap"):
            return cast_to_inputmap(object_to_cast);
        case str2int("InstancePlaceholder"):
            return cast_to_instanceplaceholder(object_to_cast);
        case str2int("IntervalTweener"):
            return cast_to_intervaltweener(object_to_cast);
        case str2int("ItemList"):
            return cast_to_itemlist(object_to_cast);
        case str2int("JNISingleton"):
            return cast_to_jnisingleton(object_to_cast);
        case str2int("JSON"):
            return cast_to_json(object_to_cast);
        case str2int("JSONRPC"):
            return cast_to_jsonrpc(object_to_cast);
        case str2int("JavaClass"):
            return cast_to_javaclass(object_to_cast);
        case str2int("JavaClassWrapper"):
            return cast_to_javaclasswrapper(object_to_cast);
        case str2int("JavaScriptBridge"):
            return cast_to_javascriptbridge(object_to_cast);
        case str2int("JavaScriptObject"):
            return cast_to_javascriptobject(object_to_cast);
        case str2int("Joint2D"):
            return cast_to_joint2d(object_to_cast);
        case str2int("Joint3D"):
            return cast_to_joint3d(object_to_cast);
        case str2int("KinematicCollision2D"):
            return cast_to_kinematiccollision2d(object_to_cast);
        case str2int("KinematicCollision3D"):
            return cast_to_kinematiccollision3d(object_to_cast);
        case str2int("Label"):
            return cast_to_label(object_to_cast);
        case str2int("Label3D"):
            return cast_to_label3d(object_to_cast);
        case str2int("LabelSettings"):
            return cast_to_labelsettings(object_to_cast);
        case str2int("Light2D"):
            return cast_to_light2d(object_to_cast);
        case str2int("Light3D"):
            return cast_to_light3d(object_to_cast);
        case str2int("LightOccluder2D"):
            return cast_to_lightoccluder2d(object_to_cast);
        case str2int("LightmapGI"):
            return cast_to_lightmapgi(object_to_cast);
        case str2int("LightmapGIData"):
            return cast_to_lightmapgidata(object_to_cast);
        case str2int("LightmapProbe"):
            return cast_to_lightmapprobe(object_to_cast);
        case str2int("Lightmapper"):
            return cast_to_lightmapper(object_to_cast);
        case str2int("LightmapperRD"):
            return cast_to_lightmapperrd(object_to_cast);
        case str2int("Line2D"):
            return cast_to_line2d(object_to_cast);
        case str2int("LineEdit"):
            return cast_to_lineedit(object_to_cast);
        case str2int("LinkButton"):
            return cast_to_linkbutton(object_to_cast);
        case str2int("MainLoop"):
            return cast_to_mainloop(object_to_cast);
        case str2int("MarginContainer"):
            return cast_to_margincontainer(object_to_cast);
        case str2int("Marker2D"):
            return cast_to_marker2d(object_to_cast);
        case str2int("Marker3D"):
            return cast_to_marker3d(object_to_cast);
        case str2int("Marshalls"):
            return cast_to_marshalls(object_to_cast);
        case str2int("Material"):
            return cast_to_material(object_to_cast);
        case str2int("MenuBar"):
            return cast_to_menubar(object_to_cast);
        case str2int("MenuButton"):
            return cast_to_menubutton(object_to_cast);
        case str2int("Mesh"):
            return cast_to_mesh(object_to_cast);
        case str2int("MeshDataTool"):
            return cast_to_meshdatatool(object_to_cast);
        case str2int("MeshInstance2D"):
            return cast_to_meshinstance2d(object_to_cast);
        case str2int("MeshInstance3D"):
            return cast_to_meshinstance3d(object_to_cast);
        case str2int("MeshLibrary"):
            return cast_to_meshlibrary(object_to_cast);
        case str2int("MeshTexture"):
            return cast_to_meshtexture(object_to_cast);
        case str2int("MethodTweener"):
            return cast_to_methodtweener(object_to_cast);
        case str2int("MissingNode"):
            return cast_to_missingnode(object_to_cast);
        case str2int("MissingResource"):
            return cast_to_missingresource(object_to_cast);
        case str2int("MobileVRInterface"):
            return cast_to_mobilevrinterface(object_to_cast);
        case str2int("MovieWriter"):
            return cast_to_moviewriter(object_to_cast);
        case str2int("MultiMesh"):
            return cast_to_multimesh(object_to_cast);
        case str2int("MultiMeshInstance2D"):
            return cast_to_multimeshinstance2d(object_to_cast);
        case str2int("MultiMeshInstance3D"):
            return cast_to_multimeshinstance3d(object_to_cast);
        case str2int("MultiplayerAPI"):
            return cast_to_multiplayerapi(object_to_cast);
        case str2int("MultiplayerAPIExtension"):
            return cast_to_multiplayerapiextension(object_to_cast);
        case str2int("MultiplayerPeer"):
            return cast_to_multiplayerpeer(object_to_cast);
        case str2int("MultiplayerPeerExtension"):
            return cast_to_multiplayerpeerextension(object_to_cast);
        case str2int("MultiplayerSpawner"):
            return cast_to_multiplayerspawner(object_to_cast);
        case str2int("MultiplayerSynchronizer"):
            return cast_to_multiplayersynchronizer(object_to_cast);
        case str2int("Mutex"):
            return cast_to_mutex(object_to_cast);
        case str2int("NativeMenu"):
            return cast_to_nativemenu(object_to_cast);
        case str2int("NavigationAgent2D"):
            return cast_to_navigationagent2d(object_to_cast);
        case str2int("NavigationAgent3D"):
            return cast_to_navigationagent3d(object_to_cast);
        case str2int("NavigationLink2D"):
            return cast_to_navigationlink2d(object_to_cast);
        case str2int("NavigationLink3D"):
            return cast_to_navigationlink3d(object_to_cast);
        case str2int("NavigationMesh"):
            return cast_to_navigationmesh(object_to_cast);
        case str2int("NavigationMeshGenerator"):
            return cast_to_navigationmeshgenerator(object_to_cast);
        case str2int("NavigationObstacle2D"):
            return cast_to_navigationobstacle2d(object_to_cast);
        case str2int("NavigationObstacle3D"):
            return cast_to_navigationobstacle3d(object_to_cast);
        case str2int("NavigationPathQueryResult2D"):
            return cast_to_navigationpathqueryresult2d(object_to_cast);
        case str2int("NavigationPathQueryResult3D"):
            return cast_to_navigationpathqueryresult3d(object_to_cast);
        case str2int("NavigationPolygon"):
            return cast_to_navigationpolygon(object_to_cast);
        case str2int("NavigationRegion2D"):
            return cast_to_navigationregion2d(object_to_cast);
        case str2int("NavigationRegion3D"):
            return cast_to_navigationregion3d(object_to_cast);
        case str2int("NavigationServer2D"):
            return cast_to_navigationserver2d(object_to_cast);
        case str2int("NavigationServer3D"):
            return cast_to_navigationserver3d(object_to_cast);
        case str2int("NinePatchRect"):
            return cast_to_ninepatchrect(object_to_cast);
        case str2int("Node"):
            return cast_to_node(object_to_cast);
        case str2int("Node2D"):
            return cast_to_node2d(object_to_cast);
        case str2int("Node3D"):
            return cast_to_node3d(object_to_cast);
        case str2int("Node3DGizmo"):
            return cast_to_node3dgizmo(object_to_cast);
        case str2int("Noise"):
            return cast_to_noise(object_to_cast);
        case str2int("NoiseTexture2D"):
            return cast_to_noisetexture2d(object_to_cast);
        case str2int("NoiseTexture3D"):
            return cast_to_noisetexture3d(object_to_cast);
        case str2int("ORMMaterial3D"):
            return cast_to_ormmaterial3d(object_to_cast);
        case str2int("OS"):
            return cast_to_os(object_to_cast);
        case str2int("Object"):
            return cast_to_object(object_to_cast);
        case str2int("Occluder3D"):
            return cast_to_occluder3d(object_to_cast);
        case str2int("OccluderInstance3D"):
            return cast_to_occluderinstance3d(object_to_cast);
        case str2int("OccluderPolygon2D"):
            return cast_to_occluderpolygon2d(object_to_cast);
        case str2int("OfflineMultiplayerPeer"):
            return cast_to_offlinemultiplayerpeer(object_to_cast);
        case str2int("OggPacketSequence"):
            return cast_to_oggpacketsequence(object_to_cast);
        case str2int("OggPacketSequencePlayback"):
            return cast_to_oggpacketsequenceplayback(object_to_cast);
        case str2int("OmniLight3D"):
            return cast_to_omnilight3d(object_to_cast);
        case str2int("OpenXRAPIExtension"):
            return cast_to_openxrapiextension(object_to_cast);
        case str2int("OpenXRAction"):
            return cast_to_openxraction(object_to_cast);
        case str2int("OpenXRActionMap"):
            return cast_to_openxractionmap(object_to_cast);
        case str2int("OpenXRActionSet"):
            return cast_to_openxractionset(object_to_cast);
        case str2int("OpenXRCompositionLayer"):
            return cast_to_openxrcompositionlayer(object_to_cast);
        case str2int("OpenXRCompositionLayerQuad"):
            return cast_to_openxrcompositionlayerquad(object_to_cast);
        case str2int("OpenXRHand"):
            return cast_to_openxrhand(object_to_cast);
        case str2int("OpenXRIPBinding"):
            return cast_to_openxripbinding(object_to_cast);
        case str2int("OpenXRInteractionProfile"):
            return cast_to_openxrinteractionprofile(object_to_cast);
        case str2int("OpenXRInterface"):
            return cast_to_openxrinterface(object_to_cast);
        case str2int("OptimizedTranslation"):
            return cast_to_optimizedtranslation(object_to_cast);
        case str2int("OptionButton"):
            return cast_to_optionbutton(object_to_cast);
        case str2int("PCKPacker"):
            return cast_to_pckpacker(object_to_cast);
        case str2int("PackedDataContainer"):
            return cast_to_packeddatacontainer(object_to_cast);
        case str2int("PackedDataContainerRef"):
            return cast_to_packeddatacontainerref(object_to_cast);
        case str2int("PackedScene"):
            return cast_to_packedscene(object_to_cast);
        case str2int("PacketPeer"):
            return cast_to_packetpeer(object_to_cast);
        case str2int("PacketPeerDTLS"):
            return cast_to_packetpeerdtls(object_to_cast);
        case str2int("PacketPeerExtension"):
            return cast_to_packetpeerextension(object_to_cast);
        case str2int("PacketPeerStream"):
            return cast_to_packetpeerstream(object_to_cast);
        case str2int("PacketPeerUDP"):
            return cast_to_packetpeerudp(object_to_cast);
        case str2int("Panel"):
            return cast_to_panel(object_to_cast);
        case str2int("PanelContainer"):
            return cast_to_panelcontainer(object_to_cast);
        case str2int("PanoramaSkyMaterial"):
            return cast_to_panoramaskymaterial(object_to_cast);
        case str2int("Parallax2D"):
            return cast_to_parallax2d(object_to_cast);
        case str2int("ParallaxBackground"):
            return cast_to_parallaxbackground(object_to_cast);
        case str2int("ParallaxLayer"):
            return cast_to_parallaxlayer(object_to_cast);
        case str2int("ParticleProcessMaterial"):
            return cast_to_particleprocessmaterial(object_to_cast);
        case str2int("Path2D"):
            return cast_to_path2d(object_to_cast);
        case str2int("Path3D"):
            return cast_to_path3d(object_to_cast);
        case str2int("PathFollow2D"):
            return cast_to_pathfollow2d(object_to_cast);
        case str2int("PathFollow3D"):
            return cast_to_pathfollow3d(object_to_cast);
        case str2int("Performance"):
            return cast_to_performance(object_to_cast);
        case str2int("PhysicalBone2D"):
            return cast_to_physicalbone2d(object_to_cast);
        case str2int("PhysicalBone3D"):
            return cast_to_physicalbone3d(object_to_cast);
        case str2int("PhysicalBoneSimulator3D"):
            return cast_to_physicalbonesimulator3d(object_to_cast);
        case str2int("PhysicalSkyMaterial"):
            return cast_to_physicalskymaterial(object_to_cast);
        case str2int("PhysicsBody2D"):
            return cast_to_physicsbody2d(object_to_cast);
        case str2int("PhysicsBody3D"):
            return cast_to_physicsbody3d(object_to_cast);
        case str2int("PhysicsDirectBodyState2D"):
            return cast_to_physicsdirectbodystate2d(object_to_cast);
        case str2int("PhysicsDirectBodyState3D"):
            return cast_to_physicsdirectbodystate3d(object_to_cast);
        case str2int("PhysicsDirectSpaceState2D"):
            return cast_to_physicsdirectspacestate2d(object_to_cast);
        case str2int("PhysicsDirectSpaceState3D"):
            return cast_to_physicsdirectspacestate3d(object_to_cast);
        case str2int("PhysicsMaterial"):
            return cast_to_physicsmaterial(object_to_cast);
        case str2int("PhysicsPointQueryParameters2D"):
            return cast_to_physicspointqueryparameters2d(object_to_cast);
        case str2int("PhysicsPointQueryParameters3D"):
            return cast_to_physicspointqueryparameters3d(object_to_cast);
        case str2int("PhysicsRayQueryParameters2D"):
            return cast_to_physicsrayqueryparameters2d(object_to_cast);
        case str2int("PhysicsRayQueryParameters3D"):
            return cast_to_physicsrayqueryparameters3d(object_to_cast);
        case str2int("PhysicsServer2D"):
            return cast_to_physicsserver2d(object_to_cast);
        case str2int("PhysicsServer2DExtension"):
            return cast_to_physicsserver2dextension(object_to_cast);
        case str2int("PhysicsServer2DManager"):
            return cast_to_physicsserver2dmanager(object_to_cast);
        case str2int("PhysicsServer3D"):
            return cast_to_physicsserver3d(object_to_cast);
        case str2int("PhysicsServer3DExtension"):
            return cast_to_physicsserver3dextension(object_to_cast);
        case str2int("PhysicsServer3DManager"):
            return cast_to_physicsserver3dmanager(object_to_cast);
        case str2int("PhysicsShapeQueryParameters2D"):
            return cast_to_physicsshapequeryparameters2d(object_to_cast);
        case str2int("PhysicsShapeQueryParameters3D"):
            return cast_to_physicsshapequeryparameters3d(object_to_cast);
        case str2int("PhysicsTestMotionParameters2D"):
            return cast_to_physicstestmotionparameters2d(object_to_cast);
        case str2int("PhysicsTestMotionParameters3D"):
            return cast_to_physicstestmotionparameters3d(object_to_cast);
        case str2int("PhysicsTestMotionResult2D"):
            return cast_to_physicstestmotionresult2d(object_to_cast);
        case str2int("PhysicsTestMotionResult3D"):
            return cast_to_physicstestmotionresult3d(object_to_cast);
        case str2int("PinJoint2D"):
            return cast_to_pinjoint2d(object_to_cast);
        case str2int("PinJoint3D"):
            return cast_to_pinjoint3d(object_to_cast);
        case str2int("PlaceholderCubemap"):
            return cast_to_placeholdercubemap(object_to_cast);
        case str2int("PlaceholderCubemapArray"):
            return cast_to_placeholdercubemaparray(object_to_cast);
        case str2int("PlaceholderMaterial"):
            return cast_to_placeholdermaterial(object_to_cast);
        case str2int("PlaceholderMesh"):
            return cast_to_placeholdermesh(object_to_cast);
        case str2int("PlaceholderTexture2D"):
            return cast_to_placeholdertexture2d(object_to_cast);
        case str2int("PlaceholderTexture2DArray"):
            return cast_to_placeholdertexture2darray(object_to_cast);
        case str2int("PlaceholderTexture3D"):
            return cast_to_placeholdertexture3d(object_to_cast);
        case str2int("PlaceholderTextureLayered"):
            return cast_to_placeholdertexturelayered(object_to_cast);
        case str2int("PlaneMesh"):
            return cast_to_planemesh(object_to_cast);
        case str2int("PointLight2D"):
            return cast_to_pointlight2d(object_to_cast);
        case str2int("PointMesh"):
            return cast_to_pointmesh(object_to_cast);
        case str2int("Polygon2D"):
            return cast_to_polygon2d(object_to_cast);
        case str2int("PolygonOccluder3D"):
            return cast_to_polygonoccluder3d(object_to_cast);
        case str2int("PolygonPathFinder"):
            return cast_to_polygonpathfinder(object_to_cast);
        case str2int("Popup"):
            return cast_to_popup(object_to_cast);
        case str2int("PopupMenu"):
            return cast_to_popupmenu(object_to_cast);
        case str2int("PopupPanel"):
            return cast_to_popuppanel(object_to_cast);
        case str2int("PortableCompressedTexture2D"):
            return cast_to_portablecompressedtexture2d(object_to_cast);
        case str2int("PrimitiveMesh"):
            return cast_to_primitivemesh(object_to_cast);
        case str2int("PrismMesh"):
            return cast_to_prismmesh(object_to_cast);
        case str2int("ProceduralSkyMaterial"):
            return cast_to_proceduralskymaterial(object_to_cast);
        case str2int("ProgressBar"):
            return cast_to_progressbar(object_to_cast);
        case str2int("ProjectSettings"):
            return cast_to_projectsettings(object_to_cast);
        case str2int("PropertyTweener"):
            return cast_to_propertytweener(object_to_cast);
        case str2int("QuadMesh"):
            return cast_to_quadmesh(object_to_cast);
        case str2int("QuadOccluder3D"):
            return cast_to_quadoccluder3d(object_to_cast);
        case str2int("RDAttachmentFormat"):
            return cast_to_rdattachmentformat(object_to_cast);
        case str2int("RDFramebufferPass"):
            return cast_to_rdframebufferpass(object_to_cast);
        case str2int("RDPipelineColorBlendState"):
            return cast_to_rdpipelinecolorblendstate(object_to_cast);
        case str2int("RDPipelineDepthStencilState"):
            return cast_to_rdpipelinedepthstencilstate(object_to_cast);
        case str2int("RDPipelineMultisampleState"):
            return cast_to_rdpipelinemultisamplestate(object_to_cast);
        case str2int("RDPipelineRasterizationState"):
            return cast_to_rdpipelinerasterizationstate(object_to_cast);
        case str2int("RDSamplerState"):
            return cast_to_rdsamplerstate(object_to_cast);
        case str2int("RDShaderFile"):
            return cast_to_rdshaderfile(object_to_cast);
        case str2int("RDShaderSPIRV"):
            return cast_to_rdshaderspirv(object_to_cast);
        case str2int("RDShaderSource"):
            return cast_to_rdshadersource(object_to_cast);
        case str2int("RDTextureFormat"):
            return cast_to_rdtextureformat(object_to_cast);
        case str2int("RDTextureView"):
            return cast_to_rdtextureview(object_to_cast);
        case str2int("RDUniform"):
            return cast_to_rduniform(object_to_cast);
        case str2int("RDVertexAttribute"):
            return cast_to_rdvertexattribute(object_to_cast);
        case str2int("RandomNumberGenerator"):
            return cast_to_randomnumbergenerator(object_to_cast);
        case str2int("Range"):
            return cast_to_range(object_to_cast);
        case str2int("RayCast2D"):
            return cast_to_raycast2d(object_to_cast);
        case str2int("RayCast3D"):
            return cast_to_raycast3d(object_to_cast);
        case str2int("RectangleShape2D"):
            return cast_to_rectangleshape2d(object_to_cast);
        case str2int("RefCounted"):
            return cast_to_refcounted(object_to_cast);
        case str2int("ReferenceRect"):
            return cast_to_referencerect(object_to_cast);
        case str2int("ReflectionProbe"):
            return cast_to_reflectionprobe(object_to_cast);
        case str2int("RegEx"):
            return cast_to_regex(object_to_cast);
        case str2int("RegExMatch"):
            return cast_to_regexmatch(object_to_cast);
        case str2int("RemoteTransform2D"):
            return cast_to_remotetransform2d(object_to_cast);
        case str2int("RemoteTransform3D"):
            return cast_to_remotetransform3d(object_to_cast);
        case str2int("RenderData"):
            return cast_to_renderdata(object_to_cast);
        case str2int("RenderDataExtension"):
            return cast_to_renderdataextension(object_to_cast);
        case str2int("RenderDataRD"):
            return cast_to_renderdatard(object_to_cast);
        case str2int("RenderSceneBuffers"):
            return cast_to_renderscenebuffers(object_to_cast);
        case str2int("RenderSceneBuffersExtension"):
            return cast_to_renderscenebuffersextension(object_to_cast);
        case str2int("RenderSceneBuffersRD"):
            return cast_to_renderscenebuffersrd(object_to_cast);
        case str2int("RenderSceneData"):
            return cast_to_renderscenedata(object_to_cast);
        case str2int("RenderSceneDataExtension"):
            return cast_to_renderscenedataextension(object_to_cast);
        case str2int("RenderSceneDataRD"):
            return cast_to_renderscenedatard(object_to_cast);
        case str2int("RenderingDevice"):
            return cast_to_renderingdevice(object_to_cast);
        case str2int("RenderingServer"):
            return cast_to_renderingserver(object_to_cast);
        case str2int("Resource"):
            return cast_to_resource(object_to_cast);
        case str2int("ResourceFormatLoader"):
            return cast_to_resourceformatloader(object_to_cast);
        case str2int("ResourceFormatSaver"):
            return cast_to_resourceformatsaver(object_to_cast);
        case str2int("ResourceImporter"):
            return cast_to_resourceimporter(object_to_cast);
        case str2int("ResourceImporterBMFont"):
            return cast_to_resourceimporterbmfont(object_to_cast);
        case str2int("ResourceImporterBitMap"):
            return cast_to_resourceimporterbitmap(object_to_cast);
        case str2int("ResourceImporterDynamicFont"):
            return cast_to_resourceimporterdynamicfont(object_to_cast);
        case str2int("ResourceImporterImage"):
            return cast_to_resourceimporterimage(object_to_cast);
        case str2int("ResourceImporterImageFont"):
            return cast_to_resourceimporterimagefont(object_to_cast);
        case str2int("ResourceImporterMP3"):
            return cast_to_resourceimportermp3(object_to_cast);
        case str2int("ResourceImporterOBJ"):
            return cast_to_resourceimporterobj(object_to_cast);
        case str2int("ResourceImporterOggVorbis"):
            return cast_to_resourceimporteroggvorbis(object_to_cast);
        case str2int("ResourceImporterScene"):
            return cast_to_resourceimporterscene(object_to_cast);
        case str2int("ResourceImporterShaderFile"):
            return cast_to_resourceimportershaderfile(object_to_cast);
        case str2int("ResourceImporterTexture"):
            return cast_to_resourceimportertexture(object_to_cast);
        case str2int("ResourceImporterTextureAtlas"):
            return cast_to_resourceimportertextureatlas(object_to_cast);
        case str2int("ResourceImporterWAV"):
            return cast_to_resourceimporterwav(object_to_cast);
        case str2int("ResourceLoader"):
            return cast_to_resourceloader(object_to_cast);
        case str2int("ResourcePreloader"):
            return cast_to_resourcepreloader(object_to_cast);
        case str2int("ResourceSaver"):
            return cast_to_resourcesaver(object_to_cast);
        case str2int("ResourceUID"):
            return cast_to_resourceuid(object_to_cast);
        case str2int("RibbonTrailMesh"):
            return cast_to_ribbontrailmesh(object_to_cast);
        case str2int("RichTextEffect"):
            return cast_to_richtexteffect(object_to_cast);
        case str2int("RichTextLabel"):
            return cast_to_richtextlabel(object_to_cast);
        case str2int("RigidBody2D"):
            return cast_to_rigidbody2d(object_to_cast);
        case str2int("RigidBody3D"):
            return cast_to_rigidbody3d(object_to_cast);
        case str2int("RootMotionView"):
            return cast_to_rootmotionview(object_to_cast);
        case str2int("SceneMultiplayer"):
            return cast_to_scenemultiplayer(object_to_cast);
        case str2int("SceneReplicationConfig"):
            return cast_to_scenereplicationconfig(object_to_cast);
        case str2int("SceneState"):
            return cast_to_scenestate(object_to_cast);
        case str2int("SceneTree"):
            return cast_to_scenetree(object_to_cast);
        case str2int("SceneTreeTimer"):
            return cast_to_scenetreetimer(object_to_cast);
        case str2int("Script"):
            return cast_to_script(object_to_cast);
        case str2int("ScriptCreateDialog"):
            return cast_to_scriptcreatedialog(object_to_cast);
        case str2int("ScriptEditor"):
            return cast_to_scripteditor(object_to_cast);
        case str2int("ScriptEditorBase"):
            return cast_to_scripteditorbase(object_to_cast);
        case str2int("ScriptExtension"):
            return cast_to_scriptextension(object_to_cast);
        case str2int("ScriptLanguage"):
            return cast_to_scriptlanguage(object_to_cast);
        case str2int("ScriptLanguageExtension"):
            return cast_to_scriptlanguageextension(object_to_cast);
        case str2int("ScrollBar"):
            return cast_to_scrollbar(object_to_cast);
        case str2int("ScrollContainer"):
            return cast_to_scrollcontainer(object_to_cast);
        case str2int("SegmentShape2D"):
            return cast_to_segmentshape2d(object_to_cast);
        case str2int("Semaphore"):
            return cast_to_semaphore(object_to_cast);
        case str2int("SeparationRayShape2D"):
            return cast_to_separationrayshape2d(object_to_cast);
        case str2int("SeparationRayShape3D"):
            return cast_to_separationrayshape3d(object_to_cast);
        case str2int("Separator"):
            return cast_to_separator(object_to_cast);
        case str2int("Shader"):
            return cast_to_shader(object_to_cast);
        case str2int("ShaderGlobalsOverride"):
            return cast_to_shaderglobalsoverride(object_to_cast);
        case str2int("ShaderInclude"):
            return cast_to_shaderinclude(object_to_cast);
        case str2int("ShaderMaterial"):
            return cast_to_shadermaterial(object_to_cast);
        case str2int("Shape2D"):
            return cast_to_shape2d(object_to_cast);
        case str2int("Shape3D"):
            return cast_to_shape3d(object_to_cast);
        case str2int("ShapeCast2D"):
            return cast_to_shapecast2d(object_to_cast);
        case str2int("ShapeCast3D"):
            return cast_to_shapecast3d(object_to_cast);
        case str2int("Shortcut"):
            return cast_to_shortcut(object_to_cast);
        case str2int("Skeleton2D"):
            return cast_to_skeleton2d(object_to_cast);
        case str2int("Skeleton3D"):
            return cast_to_skeleton3d(object_to_cast);
        case str2int("SkeletonIK3D"):
            return cast_to_skeletonik3d(object_to_cast);
        case str2int("SkeletonModification2D"):
            return cast_to_skeletonmodification2d(object_to_cast);
        case str2int("SkeletonModification2DCCDIK"):
            return cast_to_skeletonmodification2dccdik(object_to_cast);
        case str2int("SkeletonModification2DFABRIK"):
            return cast_to_skeletonmodification2dfabrik(object_to_cast);
        case str2int("SkeletonModification2DJiggle"):
            return cast_to_skeletonmodification2djiggle(object_to_cast);
        case str2int("SkeletonModification2DLookAt"):
            return cast_to_skeletonmodification2dlookat(object_to_cast);
        case str2int("SkeletonModificationStack2D"):
            return cast_to_skeletonmodificationstack2d(object_to_cast);
        case str2int("SkeletonModifier3D"):
            return cast_to_skeletonmodifier3d(object_to_cast);
        case str2int("SkeletonProfile"):
            return cast_to_skeletonprofile(object_to_cast);
        case str2int("SkeletonProfileHumanoid"):
            return cast_to_skeletonprofilehumanoid(object_to_cast);
        case str2int("Skin"):
            return cast_to_skin(object_to_cast);
        case str2int("SkinReference"):
            return cast_to_skinreference(object_to_cast);
        case str2int("Sky"):
            return cast_to_sky(object_to_cast);
        case str2int("Slider"):
            return cast_to_slider(object_to_cast);
        case str2int("SliderJoint3D"):
            return cast_to_sliderjoint3d(object_to_cast);
        case str2int("SoftBody3D"):
            return cast_to_softbody3d(object_to_cast);
        case str2int("SphereMesh"):
            return cast_to_spheremesh(object_to_cast);
        case str2int("SphereOccluder3D"):
            return cast_to_sphereoccluder3d(object_to_cast);
        case str2int("SphereShape3D"):
            return cast_to_sphereshape3d(object_to_cast);
        case str2int("SpinBox"):
            return cast_to_spinbox(object_to_cast);
        case str2int("SplitContainer"):
            return cast_to_splitcontainer(object_to_cast);
        case str2int("SpotLight3D"):
            return cast_to_spotlight3d(object_to_cast);
        case str2int("SpringArm3D"):
            return cast_to_springarm3d(object_to_cast);
        case str2int("Sprite2D"):
            return cast_to_sprite2d(object_to_cast);
        case str2int("Sprite3D"):
            return cast_to_sprite3d(object_to_cast);
        case str2int("SpriteBase3D"):
            return cast_to_spritebase3d(object_to_cast);
        case str2int("SpriteFrames"):
            return cast_to_spriteframes(object_to_cast);
        case str2int("StandardMaterial3D"):
            return cast_to_standardmaterial3d(object_to_cast);
        case str2int("StaticBody2D"):
            return cast_to_staticbody2d(object_to_cast);
        case str2int("StaticBody3D"):
            return cast_to_staticbody3d(object_to_cast);
        case str2int("StatusIndicator"):
            return cast_to_statusindicator(object_to_cast);
        case str2int("StreamPeer"):
            return cast_to_streampeer(object_to_cast);
        case str2int("StreamPeerBuffer"):
            return cast_to_streampeerbuffer(object_to_cast);
        case str2int("StreamPeerExtension"):
            return cast_to_streampeerextension(object_to_cast);
        case str2int("StreamPeerGZIP"):
            return cast_to_streampeergzip(object_to_cast);
        case str2int("StreamPeerTCP"):
            return cast_to_streampeertcp(object_to_cast);
        case str2int("StreamPeerTLS"):
            return cast_to_streampeertls(object_to_cast);
        case str2int("StyleBox"):
            return cast_to_stylebox(object_to_cast);
        case str2int("StyleBoxEmpty"):
            return cast_to_styleboxempty(object_to_cast);
        case str2int("StyleBoxFlat"):
            return cast_to_styleboxflat(object_to_cast);
        case str2int("StyleBoxLine"):
            return cast_to_styleboxline(object_to_cast);
        case str2int("StyleBoxTexture"):
            return cast_to_styleboxtexture(object_to_cast);
        case str2int("SubViewport"):
            return cast_to_subviewport(object_to_cast);
        case str2int("SubViewportContainer"):
            return cast_to_subviewportcontainer(object_to_cast);
        case str2int("SurfaceTool"):
            return cast_to_surfacetool(object_to_cast);
        case str2int("SyntaxHighlighter"):
            return cast_to_syntaxhighlighter(object_to_cast);
        case str2int("SystemFont"):
            return cast_to_systemfont(object_to_cast);
        case str2int("TCPServer"):
            return cast_to_tcpserver(object_to_cast);
        case str2int("TLSOptions"):
            return cast_to_tlsoptions(object_to_cast);
        case str2int("TabBar"):
            return cast_to_tabbar(object_to_cast);
        case str2int("TabContainer"):
            return cast_to_tabcontainer(object_to_cast);
        case str2int("TextEdit"):
            return cast_to_textedit(object_to_cast);
        case str2int("TextLine"):
            return cast_to_textline(object_to_cast);
        case str2int("TextMesh"):
            return cast_to_textmesh(object_to_cast);
        case str2int("TextParagraph"):
            return cast_to_textparagraph(object_to_cast);
        case str2int("TextServer"):
            return cast_to_textserver(object_to_cast);
        case str2int("TextServerAdvanced"):
            return cast_to_textserveradvanced(object_to_cast);
        case str2int("TextServerDummy"):
            return cast_to_textserverdummy(object_to_cast);
        case str2int("TextServerExtension"):
            return cast_to_textserverextension(object_to_cast);
        case str2int("TextServerManager"):
            return cast_to_textservermanager(object_to_cast);
        case str2int("Texture"):
            return cast_to_texture(object_to_cast);
        case str2int("Texture2D"):
            return cast_to_texture2d(object_to_cast);
        case str2int("Texture2DArray"):
            return cast_to_texture2darray(object_to_cast);
        case str2int("Texture2DArrayRD"):
            return cast_to_texture2darrayrd(object_to_cast);
        case str2int("Texture2DRD"):
            return cast_to_texture2drd(object_to_cast);
        case str2int("Texture3D"):
            return cast_to_texture3d(object_to_cast);
        case str2int("Texture3DRD"):
            return cast_to_texture3drd(object_to_cast);
        case str2int("TextureButton"):
            return cast_to_texturebutton(object_to_cast);
        case str2int("TextureCubemapArrayRD"):
            return cast_to_texturecubemaparrayrd(object_to_cast);
        case str2int("TextureCubemapRD"):
            return cast_to_texturecubemaprd(object_to_cast);
        case str2int("TextureLayered"):
            return cast_to_texturelayered(object_to_cast);
        case str2int("TextureLayeredRD"):
            return cast_to_texturelayeredrd(object_to_cast);
        case str2int("TextureProgressBar"):
            return cast_to_textureprogressbar(object_to_cast);
        case str2int("TextureRect"):
            return cast_to_texturerect(object_to_cast);
        case str2int("Theme"):
            return cast_to_theme(object_to_cast);
        case str2int("ThemeDB"):
            return cast_to_themedb(object_to_cast);
        case str2int("Thread"):
            return cast_to_thread(object_to_cast);
        case str2int("TileData"):
            return cast_to_tiledata(object_to_cast);
        case str2int("TileMap"):
            return cast_to_tilemap(object_to_cast);
        case str2int("TileMapLayer"):
            return cast_to_tilemaplayer(object_to_cast);
        case str2int("TileMapPattern"):
            return cast_to_tilemappattern(object_to_cast);
        case str2int("TileSet"):
            return cast_to_tileset(object_to_cast);
        case str2int("TileSetAtlasSource"):
            return cast_to_tilesetatlassource(object_to_cast);
        case str2int("TileSetScenesCollectionSource"):
            return cast_to_tilesetscenescollectionsource(object_to_cast);
        case str2int("TileSetSource"):
            return cast_to_tilesetsource(object_to_cast);
        case str2int("Time"):
            return cast_to_time(object_to_cast);
        case str2int("Timer"):
            return cast_to_timer(object_to_cast);
        case str2int("TorusMesh"):
            return cast_to_torusmesh(object_to_cast);
        case str2int("TouchScreenButton"):
            return cast_to_touchscreenbutton(object_to_cast);
        case str2int("Translation"):
            return cast_to_translation(object_to_cast);
        case str2int("TranslationServer"):
            return cast_to_translationserver(object_to_cast);
        case str2int("Tree"):
            return cast_to_tree(object_to_cast);
        case str2int("TreeItem"):
            return cast_to_treeitem(object_to_cast);
        case str2int("TriangleMesh"):
            return cast_to_trianglemesh(object_to_cast);
        case str2int("TubeTrailMesh"):
            return cast_to_tubetrailmesh(object_to_cast);
        case str2int("Tween"):
            return cast_to_tween(object_to_cast);
        case str2int("Tweener"):
            return cast_to_tweener(object_to_cast);
        case str2int("UDPServer"):
            return cast_to_udpserver(object_to_cast);
        case str2int("UPNP"):
            return cast_to_upnp(object_to_cast);
        case str2int("UPNPDevice"):
            return cast_to_upnpdevice(object_to_cast);
        case str2int("UndoRedo"):
            return cast_to_undoredo(object_to_cast);
        case str2int("UniformSetCacheRD"):
            return cast_to_uniformsetcacherd(object_to_cast);
        case str2int("VBoxContainer"):
            return cast_to_vboxcontainer(object_to_cast);
        case str2int("VFlowContainer"):
            return cast_to_vflowcontainer(object_to_cast);
        case str2int("VScrollBar"):
            return cast_to_vscrollbar(object_to_cast);
        case str2int("VSeparator"):
            return cast_to_vseparator(object_to_cast);
        case str2int("VSlider"):
            return cast_to_vslider(object_to_cast);
        case str2int("VSplitContainer"):
            return cast_to_vsplitcontainer(object_to_cast);
        case str2int("VehicleBody3D"):
            return cast_to_vehiclebody3d(object_to_cast);
        case str2int("VehicleWheel3D"):
            return cast_to_vehiclewheel3d(object_to_cast);
        case str2int("VideoStream"):
            return cast_to_videostream(object_to_cast);
        case str2int("VideoStreamPlayback"):
            return cast_to_videostreamplayback(object_to_cast);
        case str2int("VideoStreamPlayer"):
            return cast_to_videostreamplayer(object_to_cast);
        case str2int("VideoStreamTheora"):
            return cast_to_videostreamtheora(object_to_cast);
        case str2int("Viewport"):
            return cast_to_viewport(object_to_cast);
        case str2int("ViewportTexture"):
            return cast_to_viewporttexture(object_to_cast);
        case str2int("VisibleOnScreenEnabler2D"):
            return cast_to_visibleonscreenenabler2d(object_to_cast);
        case str2int("VisibleOnScreenEnabler3D"):
            return cast_to_visibleonscreenenabler3d(object_to_cast);
        case str2int("VisibleOnScreenNotifier2D"):
            return cast_to_visibleonscreennotifier2d(object_to_cast);
        case str2int("VisibleOnScreenNotifier3D"):
            return cast_to_visibleonscreennotifier3d(object_to_cast);
        case str2int("VisualInstance3D"):
            return cast_to_visualinstance3d(object_to_cast);
        case str2int("VisualShader"):
            return cast_to_visualshader(object_to_cast);
        case str2int("VisualShaderNode"):
            return cast_to_visualshadernode(object_to_cast);
        case str2int("VisualShaderNodeBillboard"):
            return cast_to_visualshadernodebillboard(object_to_cast);
        case str2int("VisualShaderNodeClamp"):
            return cast_to_visualshadernodeclamp(object_to_cast);
        case str2int("VisualShaderNodeColorConstant"):
            return cast_to_visualshadernodecolorconstant(object_to_cast);
        case str2int("VisualShaderNodeColorFunc"):
            return cast_to_visualshadernodecolorfunc(object_to_cast);
        case str2int("VisualShaderNodeColorOp"):
            return cast_to_visualshadernodecolorop(object_to_cast);
        case str2int("VisualShaderNodeComment"):
            return cast_to_visualshadernodecomment(object_to_cast);
        case str2int("VisualShaderNodeCompare"):
            return cast_to_visualshadernodecompare(object_to_cast);
        case str2int("VisualShaderNodeConstant"):
            return cast_to_visualshadernodeconstant(object_to_cast);
        case str2int("VisualShaderNodeCubemap"):
            return cast_to_visualshadernodecubemap(object_to_cast);
        case str2int("VisualShaderNodeCurveTexture"):
            return cast_to_visualshadernodecurvetexture(object_to_cast);
        case str2int("VisualShaderNodeCustom"):
            return cast_to_visualshadernodecustom(object_to_cast);
        case str2int("VisualShaderNodeDeterminant"):
            return cast_to_visualshadernodedeterminant(object_to_cast);
        case str2int("VisualShaderNodeDistanceFade"):
            return cast_to_visualshadernodedistancefade(object_to_cast);
        case str2int("VisualShaderNodeDotProduct"):
            return cast_to_visualshadernodedotproduct(object_to_cast);
        case str2int("VisualShaderNodeExpression"):
            return cast_to_visualshadernodeexpression(object_to_cast);
        case str2int("VisualShaderNodeFaceForward"):
            return cast_to_visualshadernodefaceforward(object_to_cast);
        case str2int("VisualShaderNodeFloatConstant"):
            return cast_to_visualshadernodefloatconstant(object_to_cast);
        case str2int("VisualShaderNodeFloatFunc"):
            return cast_to_visualshadernodefloatfunc(object_to_cast);
        case str2int("VisualShaderNodeFloatOp"):
            return cast_to_visualshadernodefloatop(object_to_cast);
        case str2int("VisualShaderNodeFrame"):
            return cast_to_visualshadernodeframe(object_to_cast);
        case str2int("VisualShaderNodeFresnel"):
            return cast_to_visualshadernodefresnel(object_to_cast);
        case str2int("VisualShaderNodeGroupBase"):
            return cast_to_visualshadernodegroupbase(object_to_cast);
        case str2int("VisualShaderNodeIf"):
            return cast_to_visualshadernodeif(object_to_cast);
        case str2int("VisualShaderNodeInput"):
            return cast_to_visualshadernodeinput(object_to_cast);
        case str2int("VisualShaderNodeIntConstant"):
            return cast_to_visualshadernodeintconstant(object_to_cast);
        case str2int("VisualShaderNodeIntFunc"):
            return cast_to_visualshadernodeintfunc(object_to_cast);
        case str2int("VisualShaderNodeIntOp"):
            return cast_to_visualshadernodeintop(object_to_cast);
        case str2int("VisualShaderNodeIntParameter"):
            return cast_to_visualshadernodeintparameter(object_to_cast);
        case str2int("VisualShaderNodeIs"):
            return cast_to_visualshadernodeis(object_to_cast);
        case str2int("VisualShaderNodeMix"):
            return cast_to_visualshadernodemix(object_to_cast);
        case str2int("VisualShaderNodeMultiplyAdd"):
            return cast_to_visualshadernodemultiplyadd(object_to_cast);
        case str2int("VisualShaderNodeOuterProduct"):
            return cast_to_visualshadernodeouterproduct(object_to_cast);
        case str2int("VisualShaderNodeOutput"):
            return cast_to_visualshadernodeoutput(object_to_cast);
        case str2int("VisualShaderNodeParameter"):
            return cast_to_visualshadernodeparameter(object_to_cast);
        case str2int("VisualShaderNodeParameterRef"):
            return cast_to_visualshadernodeparameterref(object_to_cast);
        case str2int("VisualShaderNodeParticleEmit"):
            return cast_to_visualshadernodeparticleemit(object_to_cast);
        case str2int("VisualShaderNodeProximityFade"):
            return cast_to_visualshadernodeproximityfade(object_to_cast);
        case str2int("VisualShaderNodeRandomRange"):
            return cast_to_visualshadernoderandomrange(object_to_cast);
        case str2int("VisualShaderNodeRemap"):
            return cast_to_visualshadernoderemap(object_to_cast);
        case str2int("VisualShaderNodeReroute"):
            return cast_to_visualshadernodereroute(object_to_cast);
        case str2int("VisualShaderNodeResizableBase"):
            return cast_to_visualshadernoderesizablebase(object_to_cast);
        case str2int("VisualShaderNodeSDFRaymarch"):
            return cast_to_visualshadernodesdfraymarch(object_to_cast);
        case str2int("VisualShaderNodeSDFToScreenUV"):
            return cast_to_visualshadernodesdftoscreenuv(object_to_cast);
        case str2int("VisualShaderNodeSample3D"):
            return cast_to_visualshadernodesample3d(object_to_cast);
        case str2int("VisualShaderNodeScreenUVToSDF"):
            return cast_to_visualshadernodescreenuvtosdf(object_to_cast);
        case str2int("VisualShaderNodeSmoothStep"):
            return cast_to_visualshadernodesmoothstep(object_to_cast);
        case str2int("VisualShaderNodeStep"):
            return cast_to_visualshadernodestep(object_to_cast);
        case str2int("VisualShaderNodeSwitch"):
            return cast_to_visualshadernodeswitch(object_to_cast);
        case str2int("VisualShaderNodeTexture"):
            return cast_to_visualshadernodetexture(object_to_cast);
        case str2int("VisualShaderNodeTexture3D"):
            return cast_to_visualshadernodetexture3d(object_to_cast);
        case str2int("VisualShaderNodeTextureSDF"):
            return cast_to_visualshadernodetexturesdf(object_to_cast);
        case str2int("VisualShaderNodeTransformFunc"):
            return cast_to_visualshadernodetransformfunc(object_to_cast);
        case str2int("VisualShaderNodeTransformOp"):
            return cast_to_visualshadernodetransformop(object_to_cast);
        case str2int("VisualShaderNodeUIntConstant"):
            return cast_to_visualshadernodeuintconstant(object_to_cast);
        case str2int("VisualShaderNodeUIntFunc"):
            return cast_to_visualshadernodeuintfunc(object_to_cast);
        case str2int("VisualShaderNodeUIntOp"):
            return cast_to_visualshadernodeuintop(object_to_cast);
        case str2int("VisualShaderNodeUIntParameter"):
            return cast_to_visualshadernodeuintparameter(object_to_cast);
        case str2int("VisualShaderNodeUVFunc"):
            return cast_to_visualshadernodeuvfunc(object_to_cast);
        case str2int("VisualShaderNodeUVPolarCoord"):
            return cast_to_visualshadernodeuvpolarcoord(object_to_cast);
        case str2int("VisualShaderNodeVarying"):
            return cast_to_visualshadernodevarying(object_to_cast);
        case str2int("VisualShaderNodeVaryingGetter"):
            return cast_to_visualshadernodevaryinggetter(object_to_cast);
        case str2int("VisualShaderNodeVaryingSetter"):
            return cast_to_visualshadernodevaryingsetter(object_to_cast);
        case str2int("VisualShaderNodeVec2Constant"):
            return cast_to_visualshadernodevec2constant(object_to_cast);
        case str2int("VisualShaderNodeVec2Parameter"):
            return cast_to_visualshadernodevec2parameter(object_to_cast);
        case str2int("VisualShaderNodeVec3Constant"):
            return cast_to_visualshadernodevec3constant(object_to_cast);
        case str2int("VisualShaderNodeVec3Parameter"):
            return cast_to_visualshadernodevec3parameter(object_to_cast);
        case str2int("VisualShaderNodeVec4Constant"):
            return cast_to_visualshadernodevec4constant(object_to_cast);
        case str2int("VisualShaderNodeVec4Parameter"):
            return cast_to_visualshadernodevec4parameter(object_to_cast);
        case str2int("VisualShaderNodeVectorBase"):
            return cast_to_visualshadernodevectorbase(object_to_cast);
        case str2int("VisualShaderNodeVectorCompose"):
            return cast_to_visualshadernodevectorcompose(object_to_cast);
        case str2int("VisualShaderNodeVectorFunc"):
            return cast_to_visualshadernodevectorfunc(object_to_cast);
        case str2int("VisualShaderNodeVectorLen"):
            return cast_to_visualshadernodevectorlen(object_to_cast);
        case str2int("VisualShaderNodeVectorOp"):
            return cast_to_visualshadernodevectorop(object_to_cast);
        case str2int("VisualShaderNodeVectorRefract"):
            return cast_to_visualshadernodevectorrefract(object_to_cast);
        case str2int("VoxelGI"):
            return cast_to_voxelgi(object_to_cast);
        case str2int("VoxelGIData"):
            return cast_to_voxelgidata(object_to_cast);
        case str2int("WeakRef"):
            return cast_to_weakref(object_to_cast);
        case str2int("WebRTCDataChannel"):
            return cast_to_webrtcdatachannel(object_to_cast);
        case str2int("WebRTCDataChannelExtension"):
            return cast_to_webrtcdatachannelextension(object_to_cast);
        case str2int("WebRTCMultiplayerPeer"):
            return cast_to_webrtcmultiplayerpeer(object_to_cast);
        case str2int("WebRTCPeerConnection"):
            return cast_to_webrtcpeerconnection(object_to_cast);
        case str2int("WebRTCPeerConnectionExtension"):
            return cast_to_webrtcpeerconnectionextension(object_to_cast);
        case str2int("WebSocketMultiplayerPeer"):
            return cast_to_websocketmultiplayerpeer(object_to_cast);
        case str2int("WebSocketPeer"):
            return cast_to_websocketpeer(object_to_cast);
        case str2int("WebXRInterface"):
            return cast_to_webxrinterface(object_to_cast);
        case str2int("Window"):
            return cast_to_window(object_to_cast);
        case str2int("WorkerThreadPool"):
            return cast_to_workerthreadpool(object_to_cast);
        case str2int("World2D"):
            return cast_to_world2d(object_to_cast);
        case str2int("World3D"):
            return cast_to_world3d(object_to_cast);
        case str2int("WorldBoundaryShape2D"):
            return cast_to_worldboundaryshape2d(object_to_cast);
        case str2int("WorldBoundaryShape3D"):
            return cast_to_worldboundaryshape3d(object_to_cast);
        case str2int("WorldEnvironment"):
            return cast_to_worldenvironment(object_to_cast);
        case str2int("X509Certificate"):
            return cast_to_x509certificate(object_to_cast);
        case str2int("XMLParser"):
            return cast_to_xmlparser(object_to_cast);
        case str2int("XRAnchor3D"):
            return cast_to_xranchor3d(object_to_cast);
        case str2int("XRBodyModifier3D"):
            return cast_to_xrbodymodifier3d(object_to_cast);
        case str2int("XRBodyTracker"):
            return cast_to_xrbodytracker(object_to_cast);
        case str2int("XRCamera3D"):
            return cast_to_xrcamera3d(object_to_cast);
        case str2int("XRController3D"):
            return cast_to_xrcontroller3d(object_to_cast);
        case str2int("XRControllerTracker"):
            return cast_to_xrcontrollertracker(object_to_cast);
        case str2int("XRFaceModifier3D"):
            return cast_to_xrfacemodifier3d(object_to_cast);
        case str2int("XRFaceTracker"):
            return cast_to_xrfacetracker(object_to_cast);
        case str2int("XRHandModifier3D"):
            return cast_to_xrhandmodifier3d(object_to_cast);
        case str2int("XRHandTracker"):
            return cast_to_xrhandtracker(object_to_cast);
        case str2int("XRInterface"):
            return cast_to_xrinterface(object_to_cast);
        case str2int("XRInterfaceExtension"):
            return cast_to_xrinterfaceextension(object_to_cast);
        case str2int("XRNode3D"):
            return cast_to_xrnode3d(object_to_cast);
        case str2int("XROrigin3D"):
            return cast_to_xrorigin3d(object_to_cast);
        case str2int("XRPose"):
            return cast_to_xrpose(object_to_cast);
        case str2int("XRPositionalTracker"):
            return cast_to_xrpositionaltracker(object_to_cast);
        case str2int("XRServer"):
            return cast_to_xrserver(object_to_cast);
        case str2int("XRTracker"):
            return cast_to_xrtracker(object_to_cast);
        case str2int("XRVRS"):
            return cast_to_xrvrs(object_to_cast);
        case str2int("ZIPPacker"):
            return cast_to_zippacker(object_to_cast);
        case str2int("ZIPReader"):
            return cast_to_zipreader(object_to_cast);

        default:
            assert(false); // object not supported for conversion TODO
    }
    return object_to_cast;
}